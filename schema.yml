openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/auth/login:
    post:
      operationId: auth_login_create
      tags:
      - auth
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/signup:
    post:
      operationId: auth_signup_create
      tags:
      - auth
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/authors/{author_id}/comments/{post_id}/likes:
    get:
      operationId: authors_comments_likes_retrieve
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: post_id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: authors_comments_likes_update
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: post_id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: authors_comments_likes_destroy
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: post_id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/authors/{author_id}/followers/{follower_id}/:
    get:
      operationId: authors_followers_retrieve
      description: check if FOREIGN_AUTHOR_ID is a follower of AUTHOR_ID
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      - in: path
        name: follower_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: authors_followers_update
      description: Add FOREIGN_AUTHOR_ID as a follower of AUTHOR_ID, basically same
        functionality as accept Follow request
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      - in: path
        name: follower_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: authors_followers_destroy
      description: remove FOREIGN_AUTHOR_ID as a follower of AUTHOR_ID, basically
        same functionality as unfollow
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      - in: path
        name: follower_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/authors/{author_id}/liked:
    get:
      operationId: authors_liked_retrieve
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/authors/{author_id}/posts/:
    get:
      operationId: authors_posts_retrieve
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: authors_posts_create
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/authors/{author_id}/posts/{fk}/comments/:
    get:
      operationId: authors_posts_comments_retrieve
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: fk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: authors_posts_comments_create
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: fk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/authors/{author_id}/posts/{fk}/comments/{id}:
    get:
      operationId: authors_posts_comments_retrieve_2
      description: GET /authors/{id}/posts/{id}/comments/{id} and posts/{id}/comments/{id}
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: fk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: authors_posts_comments_update
      description: GET /authors/{id}/posts/{id}/comments/{id} and posts/{id}/comments/{id}
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: fk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: authors_posts_comments_destroy
      description: GET /authors/{id}/posts/{id}/comments/{id} and posts/{id}/comments/{id}
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: fk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/authors/{author_id}/posts/{id}:
    get:
      operationId: authors_posts_retrieve_2
      description: GET /authors/{id}/posts/{id} and /posts/{id}
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: authors_posts_update
      description: GET /authors/{id}/posts/{id} and /posts/{id}
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: authors_posts_partial_update
      description: GET /authors/{id}/posts/{id} and /posts/{id}
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: authors_posts_destroy
      description: GET /authors/{id}/posts/{id} and /posts/{id}
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/authors/{author_id}/posts/{post_id}/likes:
    get:
      operationId: authors_posts_likes_retrieve
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: post_id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: authors_posts_likes_update
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: post_id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: authors_posts_likes_destroy
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
        required: true
      - in: path
        name: post_id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/authors/{id}/inbox/:
    get:
      operationId: authors_inbox_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: authors_inbox_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: authors_inbox_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - authors
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/authors/accept/follow/request/:
    put:
      operationId: authors_accept_follow_request_update
      tags:
      - authors
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/authors/decline/follow/request/:
    put:
      operationId: authors_decline_follow_request_update
      tags:
      - authors
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/authors/follow/:
    post:
      operationId: authors_follow_create
      tags:
      - authors
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/authors/unfollow/:
    post:
      operationId: authors_unfollow_create
      tags:
      - authors
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/followers/{author_id}/followers/{follower_id}/:
    get:
      operationId: followers_followers_retrieve
      description: check if FOREIGN_AUTHOR_ID is a follower of AUTHOR_ID
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      - in: path
        name: follower_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      tags:
      - followers
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: followers_followers_update
      description: Add FOREIGN_AUTHOR_ID as a follower of AUTHOR_ID, basically same
        functionality as accept Follow request
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      - in: path
        name: follower_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      tags:
      - followers
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: followers_followers_destroy
      description: remove FOREIGN_AUTHOR_ID as a follower of AUTHOR_ID, basically
        same functionality as unfollow
      parameters:
      - in: path
        name: author_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      - in: path
        name: follower_id
        schema:
          type: string
          pattern: ^.+$
        required: true
      tags:
      - followers
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/followers/accept/follow/request/:
    put:
      operationId: followers_accept_follow_request_update
      tags:
      - followers
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/followers/decline/follow/request/:
    put:
      operationId: followers_decline_follow_request_update
      tags:
      - followers
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/followers/follow/:
    post:
      operationId: followers_follow_create
      tags:
      - followers
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/followers/unfollow/:
    post:
      operationId: followers_unfollow_create
      tags:
      - followers
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/images/:
    post:
      operationId: images_create
      description: POST /images
      tags:
      - images
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/images/{id}:
    get:
      operationId: images_retrieve
      description: GET /images
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - images
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: images_create_2
      description: GET /images
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - images
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: images_destroy
      description: GET /images
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - images
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/nodes/:
    get:
      operationId: nodes_retrieve
      tags:
      - nodes
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/nodes/all:
    get:
      operationId: nodes_all_retrieve
      tags:
      - nodes
      security:
      - {}
      responses:
        '200':
          description: No response body
  /api/posts/:
    get:
      operationId: posts_retrieve
      tags:
      - posts
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: posts_create
      tags:
      - posts
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/posts/{fk}/comments/:
    get:
      operationId: posts_comments_retrieve
      parameters:
      - in: path
        name: fk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - posts
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: posts_comments_create
      parameters:
      - in: path
        name: fk
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - posts
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/posts/{fk}/comments/{id}:
    get:
      operationId: posts_comments_retrieve_2
      description: GET /authors/{id}/posts/{id}/comments/{id} and posts/{id}/comments/{id}
      parameters:
      - in: path
        name: fk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - posts
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: posts_comments_update
      description: GET /authors/{id}/posts/{id}/comments/{id} and posts/{id}/comments/{id}
      parameters:
      - in: path
        name: fk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - posts
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: posts_comments_destroy
      description: GET /authors/{id}/posts/{id}/comments/{id} and posts/{id}/comments/{id}
      parameters:
      - in: path
        name: fk
        schema:
          type: string
          format: uuid
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - posts
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/posts/{id}:
    get:
      operationId: posts_retrieve_2
      description: GET /authors/{id}/posts/{id} and /posts/{id}
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - posts
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: posts_update
      description: GET /authors/{id}/posts/{id} and /posts/{id}
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - posts
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: posts_partial_update
      description: GET /authors/{id}/posts/{id} and /posts/{id}
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - posts
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: posts_destroy
      description: GET /authors/{id}/posts/{id} and /posts/{id}
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - posts
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/authors/:
    get:
      operationId: users_retrieve
      tags:
      - users
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: users_create
      tags:
      - users
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/authors/{id}:
    get:
      operationId: users_retrieve_2
      description: GET /users
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - users
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: users_create_2
      description: GET /users
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - users
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: users_destroy
      description: GET /users
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - users
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/authors/all:
    get:
      operationId: users_all_retrieve
      tags:
      - users
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
